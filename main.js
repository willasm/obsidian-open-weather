/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OpenWeather
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// getCurrentWeather.ts
async function getCurrentWeather(key, latitude, longitude, language, units, format) {
  let weatherData;
  let weatherString;
  let url;
  let aqiNumber;
  let aqiString;
  let urlAQI = `https://api.openweathermap.org/data/2.5/air_pollution?lat=${latitude}&lon=${longitude}&appid=${key}`;
  if (latitude.length > 0 && longitude.length > 0 && key.length > 0) {
    let reqAQI = await fetch(urlAQI);
    let jsonAQI = await reqAQI.json();
    if (jsonAQI.cod) {
      aqiNumber = 0;
      aqiString = "Air Quality Index is Not Available";
    } else {
      const aqiStringsArr = ["Good", "Fair", "Moderate", "Poor", "Very Poor"];
      aqiNumber = jsonAQI.list[0].main.aqi;
      aqiString = aqiStringsArr[aqiNumber - 1];
    }
    ;
  } else {
    aqiNumber = 0;
    aqiString = "Air Quality Index is Not Available";
  }
  ;
  if (latitude.length > 0 && longitude.length > 0) {
    url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&lang=${language}&appid=${key}&units=${units}`;
  } else {
    url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&lang=${language}&appid=${key}&units=${units}`;
  }
  ;
  let req = await fetch(url);
  let json = await req.json();
  if (json.cod != 200) {
    weatherString = "Error Code " + json.cod + ": " + json.message;
    return weatherString;
  }
  ;
  let conditions = json.weather[0].description;
  let id = json.weather[0].id;
  let conditionsEm = "";
  if (id > 199 && id < 300) {
    conditionsEm = "\u26C8\uFE0F";
  }
  if (id > 299 && id < 500) {
    conditionsEm = "\u{1F326}\uFE0F";
  }
  if (id > 499 && id < 600) {
    conditionsEm = "\u{1F327}\uFE0F";
  }
  if (id > 599 && id < 700) {
    conditionsEm = "\u2744\uFE0F";
  }
  if (id > 699 && id < 800) {
    conditionsEm = "\u{1F32B}\uFE0F";
  }
  if (id == 771) {
    conditionsEm = "\u{1F300}";
  }
  if (id == 781) {
    conditionsEm = "\u{1F32A}\uFE0F";
  }
  if (id == 800) {
    conditionsEm = "\u{1F506}";
  }
  if (id > 800 && id < 804) {
    conditionsEm = "\u{1F325}\uFE0F";
  }
  if (id == 804) {
    conditionsEm = "\u2601\uFE0F";
  }
  conditions = conditions.replace(/^\w|\s\w/g, (c2) => c2.toUpperCase());
  let iconName = json.weather[0].icon;
  const iconApi = await fetch("http://openweathermap.org/img/w/" + iconName + ".png");
  let iconUrl = iconApi.url;
  let temp = json.main.temp;
  temp = Math.round(temp);
  let feelsLike = json.main.feels_like;
  feelsLike = Math.round(feelsLike);
  let tempMin = json.main.temp_min;
  tempMin = Math.round(tempMin);
  let tempMax = json.main.temp_max;
  tempMax = Math.round(tempMax);
  let pressure = json.main.pressure;
  let humidity = json.main.humidity;
  let seaLevel = json.main.sea_level;
  let groundLevel = json.main.grnd_level;
  let visibility = json.visibility;
  let windSpeed = json.wind.speed;
  let windSpeedms = json.wind.speed;
  if (this.units == "metric") {
    windSpeed = Math.round(windSpeed * 3.6);
    windSpeedms = Math.round(windSpeedms);
  } else {
    windSpeed = Math.round(windSpeed);
  }
  let windDirection = json.wind.deg;
  const directions = ["North", "Northeast", "East", "Southeast", "South", "Southwest", "West", "Northwest"];
  windDirection = directions[Math.round(windDirection / 45) % 8];
  let windGust = json.wind.gust;
  if (windGust != void 0) {
    if (this.units == "metric") {
      windGust = Math.round(windGust * 3.6);
    } else {
      windGust = Math.round(windGust);
    }
  } else {
    windGust = "N/A";
  }
  let clouds = json.clouds.all;
  let rain1h;
  let rain3h;
  let snow1h;
  let snow3h;
  let precipitation1h;
  let precipitation3h;
  if (json.rain != void 0) {
    let rainObj = json.rain;
    let keys = Object.keys(rainObj);
    let values = Object.values(rainObj);
    if (keys[0] === "1h") {
      rain1h = values[0];
    } else if (keys[0] === "3h") {
      rain3h = values[0];
    }
    if (keys.length > 1) {
      if (keys[1] === "1h") {
        rain1h = values[1];
      } else if (keys[1] === "3h") {
        rain3h = values[1];
      }
    }
  } else {
    rain1h = 0;
    rain3h = 0;
  }
  if (rain1h === void 0) {
    rain1h = 0;
  }
  ;
  if (rain3h === void 0) {
    rain3h = 0;
  }
  ;
  if (json.snow != void 0) {
    let snowObj = json.snow;
    let keys = Object.keys(snowObj);
    let values = Object.values(snowObj);
    if (keys[0] === "1h") {
      snow1h = values[0];
    } else if (keys[0] === "3h") {
      snow3h = values[0];
    }
    if (keys.length > 1) {
      if (keys[1] === "1h") {
        snow1h = values[1];
      } else if (keys[1] === "3h") {
        snow3h = values[1];
      }
    }
  } else {
    snow1h = 0;
    snow3h = 0;
  }
  if (snow1h === void 0) {
    snow1h = 0;
  }
  ;
  if (snow3h === void 0) {
    snow3h = 0;
  }
  ;
  precipitation1h = rain1h || snow1h;
  precipitation3h = rain3h || snow3h;
  let dt = json.dt;
  let a = new Date(dt * 1e3);
  const months1 = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
  const months2 = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
  const months3 = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  const months4 = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  let year1 = a.getFullYear();
  let year2str = String(year1).slice(-2);
  let year2 = Number(year2str);
  let month1 = months1[a.getMonth()];
  let month2 = months2[a.getMonth()];
  let month3 = months3[a.getMonth()];
  let month4 = months4[a.getMonth()];
  let date1 = a.getDate();
  let date2 = a.getDate() < 10 ? "0" + a.getDate() : a.getDate();
  let ampm1 = "AM";
  let ampm2 = "am";
  if (a.getHours() > 11) {
    ampm1 = "PM";
    ampm2 = "pm";
  }
  let hour1 = a.getHours();
  let hour2 = a.getHours();
  if (a.getHours() > 12) {
    hour2 = a.getHours() - 12;
  }
  if (a.getHours() == 0) {
    hour1 = 12;
    hour2 = 12;
  }
  let min = a.getMinutes() < 10 ? "0" + a.getMinutes() : a.getMinutes();
  let sec = a.getSeconds() < 10 ? "0" + a.getSeconds() : a.getSeconds();
  let sr = json.sys.sunrise;
  let b = new Date(sr * 1e3);
  let srhour = b.getHours() < 10 ? "0" + b.getHours() : b.getHours();
  let srmin = b.getMinutes() < 10 ? "0" + b.getMinutes() : b.getMinutes();
  let srsec = b.getSeconds() < 10 ? "0" + b.getSeconds() : b.getSeconds();
  let sunrise = srhour + ":" + srmin + ":" + srsec;
  let ss = json.sys.sunset;
  let c = new Date(ss * 1e3);
  let sshour = c.getHours() < 10 ? "0" + c.getHours() : c.getHours();
  let ssmin = c.getMinutes() < 10 ? "0" + c.getMinutes() : c.getMinutes();
  let sssec = c.getSeconds() < 10 ? "0" + c.getSeconds() : c.getSeconds();
  let sunset = sshour + ":" + ssmin + ":" + sssec;
  let name = json.name;
  let lat = json.coord.lat;
  let lon = json.coord.lon;
  weatherData = {
    "status": "ok",
    "conditions": conditions,
    "conditionsEm": conditionsEm,
    "icon": iconUrl,
    "temp": temp,
    "feelsLike": feelsLike,
    "tempMin": tempMin,
    "tempMax": tempMax,
    "pressure": pressure,
    "humidity": humidity,
    "seaLevel": seaLevel,
    "groundLevel": groundLevel,
    "visibility": visibility,
    "windSpeed": windSpeed,
    "windSpeedms": windSpeedms,
    "windDirection": windDirection,
    "windGust": windGust,
    "clouds": clouds,
    "rain1h": rain1h,
    "rain3h": rain3h,
    "snow1h": snow1h,
    "snow3h": snow3h,
    "precipitation1h": precipitation1h,
    "precipitation3h": precipitation3h,
    "year1": year1,
    "year2": year2,
    "month1": month1,
    "month2": month2,
    "month3": month3,
    "month4": month4,
    "date1": date1,
    "date2": date2,
    "ampm1": ampm1,
    "ampm2": ampm2,
    "hour1": hour1,
    "hour2": hour2,
    "min": min,
    "sec": sec,
    "sunrise": sunrise,
    "sunset": sunset,
    "name": name,
    "latitude": lat,
    "longitude": lon,
    "aqiNum": aqiNumber,
    "aqiStr": aqiString
  };
  weatherString = format.replace(/%desc%/gmi, weatherData.conditions);
  weatherString = weatherString.replace(/%desc-em%/gmi, weatherData.conditionsEm);
  weatherString = weatherString.replace(/%icon%/gmi, `<img src=${weatherData.icon} />`);
  weatherString = weatherString.replace(/%temp%/gmi, weatherData.temp);
  weatherString = weatherString.replace(/%feels%/gmi, weatherData.feelsLike);
  weatherString = weatherString.replace(/%tempmin%/gmi, weatherData.tempMin);
  weatherString = weatherString.replace(/%tempmax%/gmi, weatherData.tempMax);
  weatherString = weatherString.replace(/%pressure%/gmi, weatherData.pressure);
  weatherString = weatherString.replace(/%humidity%/gmi, weatherData.humidity);
  weatherString = weatherString.replace(/%pressure-sl%/gmi, weatherData.seaLevel);
  weatherString = weatherString.replace(/%pressure-gl%/gmi, weatherData.groundLevel);
  weatherString = weatherString.replace(/%visibility%/gmi, weatherData.visibility);
  weatherString = weatherString.replace(/%wind-speed%/gmi, weatherData.windSpeed);
  weatherString = weatherString.replace(/%wind-speed-ms%/gmi, weatherData.windSpeedms);
  weatherString = weatherString.replace(/%wind-dir%/gmi, weatherData.windDirection);
  if (weatherData.windGust == "N/A") {
    weatherString = weatherString.replace(/\^.+\^/gmi, "");
  } else {
    weatherString = weatherString.replace(/%wind-gust%/gmi, weatherData.windGust);
    weatherString = weatherString.replace(/\^(.+)\^/gmi, "$1");
  }
  weatherString = weatherString.replace(/%clouds%/gmi, `${weatherData.clouds}`);
  weatherString = weatherString.replace(/%rain1h%/gmi, `${weatherData.rain1h}`);
  weatherString = weatherString.replace(/%rain3h%/gmi, `${weatherData.rain3h}`);
  weatherString = weatherString.replace(/%snow1h%/gmi, `${weatherData.snow1h}`);
  weatherString = weatherString.replace(/%snow3h%/gmi, `${weatherData.snow3h}`);
  weatherString = weatherString.replace(/%precipitation1h%/gmi, `${weatherData.precipitation1h}`);
  weatherString = weatherString.replace(/%precipitation3h%/gmi, `${weatherData.precipitation3h}`);
  weatherString = weatherString.replace(/%dateYear1%/gmi, `${weatherData.year1}`);
  weatherString = weatherString.replace(/%dateYear2%/gmi, `${weatherData.year2}`);
  weatherString = weatherString.replace(/%dateMonth1%/gmi, `${weatherData.month1}`);
  weatherString = weatherString.replace(/%dateMonth2%/gmi, `${weatherData.month2}`);
  weatherString = weatherString.replace(/%dateMonth3%/gmi, `${weatherData.month3}`);
  weatherString = weatherString.replace(/%dateMonth4%/gmi, `${weatherData.month4}`);
  weatherString = weatherString.replace(/%dateDay1%/gmi, `${weatherData.date1}`);
  weatherString = weatherString.replace(/%dateDay2%/gmi, `${weatherData.date2}`);
  weatherString = weatherString.replace(/%ampm1%/gmi, `${weatherData.ampm1}`);
  weatherString = weatherString.replace(/%ampm2%/gmi, `${weatherData.ampm2}`);
  weatherString = weatherString.replace(/%timeH1%/gmi, `${weatherData.hour1}`);
  weatherString = weatherString.replace(/%timeH2%/gmi, `${weatherData.hour2}`);
  weatherString = weatherString.replace(/%timeM%/gmi, `${weatherData.min}`);
  weatherString = weatherString.replace(/%timeS%/gmi, `${weatherData.sec}`);
  weatherString = weatherString.replace(/%sunrise%/gmi, `${weatherData.sunrise}`);
  weatherString = weatherString.replace(/%sunset%/gmi, `${weatherData.sunset}`);
  weatherString = weatherString.replace(/%name%/gmi, `${weatherData.name}`);
  weatherString = weatherString.replace(/%latitude%/gmi, `${weatherData.latitude}`);
  weatherString = weatherString.replace(/%longitude%/gmi, `${weatherData.longitude}`);
  weatherString = weatherString.replace(/%aqinumber%/gmi, `${weatherData.aqiNum}`);
  weatherString = weatherString.replace(/%aqistring%/gmi, `${weatherData.aqiStr}`);
  return weatherString;
}

// getForecastWeather.ts
async function getForecastWeather(key, latitude, longitude, language, units, format) {
  let weatherData;
  let weatherString;
  let url;
  if (latitude.length > 0 && longitude.length > 0) {
    url = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&lang=${language}&appid=${key}&units=${units}`;
  } else {
    url = `https://api.openweathermap.org/data/2.5/forecast?q=${this}&lang=${this}&appid=${key}&units=${units}`;
  }
  ;
  let req = await fetch(url);
  let json = await req.json();
  if (json.cod != 200) {
    weatherString = "Error Code " + json.cod + ": " + json.message;
    return weatherString;
  }
  ;
}

// main.ts
var displayErrorMsg = true;
var DEFAULT_SETTINGS = {
  location: "",
  latitude: "",
  longitude: "",
  key: "",
  units: "metric",
  language: "en",
  excludeFolder: "",
  weatherFormat1: "%desc% \u2022 Current Temp: %temp%\xB0C \u2022 Feels Like: %feels%\xB0C\n",
  weatherFormat2: "%name%: %dateMonth4% %dateDay2% - %timeH2%:%timeM% %ampm1%\nCurrent Temp: %temp%\xB0C \u2022 Feels Like: %feels%\xB0C\nWind: %wind-speed% km/h from the %wind-dir%^ with gusts up to %wind-gust% km/h^\nSunrise: %sunrise% \u2022 Sunset: %sunset%\n",
  weatherFormat3: "%icon%&nbsp;%dateMonth4% %dateDay2% %dateYear1% \u2022 %timeH2%:%timeM% %ampm1% \u2022 %desc%<br>&nbsp;Recorded Temp: %temp% \u2022 Felt like: %feels%<br>&nbsp;Wind: %wind-speed% km/h from the %wind-dir%^ with gusts up to %wind-gust% km/h^<br>&nbsp;Sunrise: %sunrise% \u2022 Sunset: %sunset%",
  weatherFormat4: "%icon%&nbsp;%dateMonth4% %dateDay2% %dateYear1% \u2022 %timeH2%:%timeM% %ampm1% \u2022 %desc%<br>&nbsp;Current Temp: %temp% \u2022 Feels like: %feels%<br>&nbsp;Wind: %wind-speed% km/h from the %wind-dir%^ with gusts up to %wind-gust% km/h^<br>&nbsp;Sunrise: %sunrise% \u2022 Sunset: %sunset%",
  statusbarActive: true,
  weatherFormatSB: " | %desc% | Current Temp: %temp%\xB0C | Feels Like: %feels%\xB0C | ",
  statusbarUpdateFreq: "15"
};
var FormatWeather = class {
  constructor(location2, latitude, longitude, key, units, language, format) {
    this.location = location2;
    this.latitude = latitude;
    this.longitude = longitude;
    this.key = key;
    this.units = units;
    this.language = language;
    this.format = format;
  }
  async getWeather() {
    let weatherStr = await getCurrentWeather(this.key, this.latitude, this.longitude, this.language, this.units, this.format);
    let forecastWeatherStr = await getForecastWeather(this.key, this.latitude, this.longitude, this.language, this.units, this.format);
    return weatherStr;
  }
  async getWeatherString() {
    try {
      let weatherString = await this.getWeather();
      return weatherString;
    } catch (error) {
      console.log("Error", error);
      let weatherString = "Failed to fetch weather data";
      return weatherString;
    }
  }
};
var OpenWeather = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("thermometer-snowflake", "OpenWeather", (evt) => {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!view) {
        new import_obsidian.Notice("Open a Markdown file first.");
        return;
      }
      new InsertWeatherPicker(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat1, this.settings.weatherFormat2, this.settings.weatherFormat3, this.settings.weatherFormat4).open();
    });
    this.statusBar = this.addStatusBarItem();
    if (this.settings.statusbarActive) {
      if (this.settings.key.length == 0 || this.settings.location.length == 0) {
        if (displayErrorMsg) {
          new import_obsidian.Notice("OpenWeather plugin settings are undefined, check your settings.", 8e3);
          this.statusBar.setText("");
          console.log("Err:", displayErrorMsg);
          displayErrorMsg = false;
        }
      } else {
        let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormatSB);
        let weatherStr = await wstr.getWeatherString();
        if (weatherStr.length == 0) {
          return;
        }
        ;
        this.statusBar.setText(weatherStr);
      }
    } else {
      this.statusBar.setText("");
    }
    this.addCommand({
      id: "replace-template-string",
      name: "Replace template strings",
      editorCallback: async (editor, view) => {
        if (this.settings.weatherFormat1.length > 0) {
          if (view.data.contains("%weather1%")) {
            let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat1);
            let weatherStr = await wstr.getWeatherString();
            if (weatherStr.length == 0) {
              return;
            }
            ;
            let doc = editor.getValue().replace(/%weather1%/gmi, weatherStr);
            editor.setValue(doc);
          }
        }
        if (this.settings.weatherFormat2.length > 0) {
          if (view.data.contains("%weather2%")) {
            let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat2);
            let weatherStr = await wstr.getWeatherString();
            if (weatherStr.length == 0) {
              return;
            }
            ;
            let doc = editor.getValue().replace(/%weather2%/gmi, weatherStr);
            editor.setValue(doc);
          }
        }
        if (this.settings.weatherFormat3.length > 0) {
          if (view.data.contains("%weather3%")) {
            let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat3);
            let weatherStr = await wstr.getWeatherString();
            if (weatherStr.length == 0) {
              return;
            }
            ;
            let doc = editor.getValue().replace(/%weather3%/gmi, weatherStr);
            editor.setValue(doc);
          }
        }
        if (this.settings.weatherFormat4.length > 0) {
          if (view.data.contains("%weather4%")) {
            let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat4);
            let weatherStr = await wstr.getWeatherString();
            if (weatherStr.length == 0) {
              return;
            }
            ;
            let doc = editor.getValue().replace(/%weather4%/gmi, weatherStr);
            editor.setValue(doc);
          }
        }
      }
    });
    this.addCommand({
      id: "insert-string-one",
      name: "Insert weather string one",
      editorCallback: async (editor, view) => {
        if (this.settings.weatherFormat1.length > 0) {
          let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat1);
          let weatherStr = await wstr.getWeatherString();
          if (weatherStr.length == 0) {
            return;
          }
          ;
          editor.replaceSelection(`${weatherStr}`);
        } else {
          new import_obsidian.Notice("Weather string 1 is undefined! Please add a definition for it in the OpenWeather plugin settings.", 5e3);
        }
      }
    });
    this.addCommand({
      id: "insert-string-two",
      name: "Insert weather string two",
      editorCallback: async (editor, view) => {
        if (this.settings.weatherFormat2.length > 0) {
          let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat2);
          let weatherStr = await wstr.getWeatherString();
          if (weatherStr.length == 0) {
            return;
          }
          ;
          editor.replaceSelection(`${weatherStr}`);
        } else {
          new import_obsidian.Notice("Weather string 2 is undefined! Please add a definition for it in the OpenWeather plugin settings.", 5e3);
        }
      }
    });
    this.addCommand({
      id: "insert-string-three",
      name: "Insert weather string three",
      editorCallback: async (editor, view) => {
        if (this.settings.weatherFormat3.length > 0) {
          let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat3);
          let weatherStr = await wstr.getWeatherString();
          if (weatherStr.length == 0) {
            return;
          }
          ;
          editor.replaceSelection(`${weatherStr}`);
        } else {
          new import_obsidian.Notice("Weather string 3 is undefined! Please add a definition for it in the OpenWeather plugin settings.", 5e3);
        }
      }
    });
    this.addCommand({
      id: "insert-string-four",
      name: "Insert weather string four",
      editorCallback: async (editor, view) => {
        if (this.settings.weatherFormat4.length > 0) {
          let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat4);
          let weatherStr = await wstr.getWeatherString();
          if (weatherStr.length == 0) {
            return;
          }
          ;
          editor.replaceSelection(`${weatherStr}`);
        } else {
          new import_obsidian.Notice("Weather string 4 is undefined! Please add a definition for it in the OpenWeather plugin settings.", 5e3);
        }
      }
    });
    this.addSettingTab(new OpenWeatherSettingsTab(this.app, this, this.settings));
    this.registerEvent(this.app.workspace.on("file-open", async (file) => {
      if (file) {
        await new Promise((r) => setTimeout(r, 2e3));
        await this.replaceTemplateStrings();
        await this.updateCurrentWeatherDiv();
      }
    }));
    this.registerEvent(this.app.workspace.on("layout-change", async () => {
      await new Promise((r) => setTimeout(r, 2e3));
      await this.replaceTemplateStrings();
      await this.updateCurrentWeatherDiv();
    }));
    this.registerEvent(this.app.metadataCache.on("resolved", async () => {
      await this.replaceTemplateStrings();
      await this.updateCurrentWeatherDiv();
    }));
    let updateFreq = this.settings.statusbarUpdateFreq;
    this.registerInterval(window.setInterval(() => this.updateWeather(), Number(updateFreq) * 60 * 1e3));
    this.registerInterval(window.setInterval(() => this.updateCurrentWeatherDiv(), Number(updateFreq) * 60 * 1e3));
  }
  async updateCurrentWeatherDiv() {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!view)
      return;
    if (document.getElementsByClassName("weather_current_1").length === 1) {
      const divEl = document.getElementsByClassName("weather_current_1")[0];
      let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat1);
      let weatherStr = await wstr.getWeatherString();
      if (weatherStr.length == 0) {
        return;
      }
      ;
      divEl.innerHTML = weatherStr;
    }
    if (document.getElementsByClassName("weather_current_2").length === 1) {
      const divEl = document.getElementsByClassName("weather_current_2")[0];
      let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat2);
      let weatherStr = await wstr.getWeatherString();
      if (weatherStr.length == 0) {
        return;
      }
      ;
      divEl.innerHTML = weatherStr;
    }
    if (document.getElementsByClassName("weather_current_3").length === 1) {
      const divEl = document.getElementsByClassName("weather_current_3")[0];
      let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat3);
      let weatherStr = await wstr.getWeatherString();
      divEl.innerHTML = weatherStr;
    }
    if (document.getElementsByClassName("weather_current_4").length === 1) {
      const divEl = document.getElementsByClassName("weather_current_4")[0];
      let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat4);
      let weatherStr = await wstr.getWeatherString();
      if (weatherStr.length == 0) {
        return;
      }
      ;
      divEl.innerHTML = weatherStr;
    }
  }
  async replaceTemplateStrings() {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!view)
      return;
    const file = app.workspace.getActiveFile();
    if (view.file.parent.path.includes(this.settings.excludeFolder))
      return;
    let editor = view.getViewData();
    if (editor == null)
      return;
    if (this.settings.weatherFormat1.length > 0) {
      if (editor.contains("%weather1%")) {
        let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat1);
        let weatherStr = await wstr.getWeatherString();
        if (weatherStr.length == 0) {
          return;
        }
        ;
        editor = editor.replace(/%weather1%/gmi, weatherStr);
        file == null ? void 0 : file.vault.modify(file, editor);
      }
    }
    if (this.settings.weatherFormat2.length > 0) {
      if (editor.contains("%weather2%")) {
        let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat2);
        let weatherStr = await wstr.getWeatherString();
        if (weatherStr.length == 0) {
          return;
        }
        ;
        editor = editor.replace(/%weather2%/gmi, weatherStr);
        file == null ? void 0 : file.vault.modify(file, editor);
      }
    }
    if (this.settings.weatherFormat3.length > 0) {
      if (editor.contains("%weather3%")) {
        let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat3);
        let weatherStr = await wstr.getWeatherString();
        if (weatherStr.length == 0) {
          return;
        }
        ;
        editor = editor.replace(/%weather3%/gmi, weatherStr);
        file == null ? void 0 : file.vault.modify(file, editor);
      }
    }
    if (this.settings.weatherFormat4.length > 0) {
      if (editor.contains("%weather4%")) {
        let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormat4);
        let weatherStr = await wstr.getWeatherString();
        if (weatherStr.length == 0) {
          return;
        }
        ;
        editor = editor.replace(/%weather4%/gmi, weatherStr);
        file == null ? void 0 : file.vault.modify(file, editor);
      }
    }
  }
  async updateWeather() {
    if (this.settings.statusbarActive) {
      if (this.settings.key.length == 0 || this.settings.location.length == 0) {
        if (displayErrorMsg) {
          new import_obsidian.Notice("OpenWeather plugin settings are undefined, check your settings.");
          this.statusBar.setText("");
          displayErrorMsg = false;
        }
      } else {
        let wstr = new FormatWeather(this.settings.location, this.settings.latitude, this.settings.longitude, this.settings.key, this.settings.units, this.settings.language, this.settings.weatherFormatSB);
        let weatherStr = await wstr.getWeatherString();
        if (weatherStr.length == 0) {
          return;
        }
        ;
        this.statusBar.setText(weatherStr);
      }
    } else {
      this.statusBar.setText("");
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async onPick(picked, settings) {
    let name = picked.name;
    let lat = picked.lat;
    let lon = picked.lon;
    const inputEvent = new InputEvent("input", {
      bubbles: true,
      cancelable: true,
      composed: true,
      inputType: "insertText",
      data: "your_data"
    });
    let inputEls = document.getElementsByTagName("input");
    for (let idx = 0; idx < inputEls.length; idx++) {
      if (inputEls[idx].placeholder == "Enter city Eg. Chicago or South Bend,WA,US") {
        inputEls[idx].value = name;
        inputEls[idx].dispatchEvent(inputEvent);
      }
      ;
      if (inputEls[idx].placeholder == "53.5501") {
        inputEls[idx].value = lat;
        inputEls[idx].dispatchEvent(inputEvent);
      }
      ;
      if (inputEls[idx].placeholder == "-113.4687") {
        inputEls[idx].value = lon;
        inputEls[idx].dispatchEvent(inputEvent);
      }
      ;
    }
    ;
  }
};
var ALL_COMMANDS = [];
var InsertWeatherPicker = class extends import_obsidian.SuggestModal {
  constructor(location2, latitude, longitude, key, units, language, weatherFormat1, weatherFormat2, weatherFormat3, weatherFormat4) {
    super(app);
    this.location = location2;
    this.latitude = latitude;
    this.longitude = longitude;
    this.key = key;
    this.units = units;
    this.language = language;
    this.weatherFormat1 = weatherFormat1;
    this.weatherFormat2 = weatherFormat2;
    this.weatherFormat3 = weatherFormat3;
    this.weatherFormat4 = weatherFormat4;
  }
  async getSuggestions(query) {
    ALL_COMMANDS = [];
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if ((view == null ? void 0 : view.getViewType()) === "markdown") {
      const md = view;
      if (md.getMode() === "source") {
        if (this.weatherFormat1.length > 0) {
          let wstr = new FormatWeather(this.location, this.latitude, this.longitude, this.key, this.units, this.language, this.weatherFormat1);
          let weatherStr = await wstr.getWeatherString();
          if (weatherStr.length > 0) {
            this.weatherFormat1 = weatherStr;
            ALL_COMMANDS.push({ command: "Insert Weather String - 1", format: this.weatherFormat1 });
          } else {
            this.weatherFormat1 = "";
            return ALL_COMMANDS.filter((command) => command.command.toLowerCase().includes(query.toLowerCase()));
          }
        }
        if (this.weatherFormat2.length > 0) {
          let wstr = new FormatWeather(this.location, this.latitude, this.longitude, this.key, this.units, this.language, this.weatherFormat2);
          let weatherStr = await wstr.getWeatherString();
          if (weatherStr.length > 0) {
            this.weatherFormat2 = weatherStr;
            ALL_COMMANDS.push({ command: "Insert Weather String - 2", format: this.weatherFormat2 });
          } else {
            this.weatherFormat2 = "";
            return ALL_COMMANDS.filter((command) => command.command.toLowerCase().includes(query.toLowerCase()));
          }
        }
        if (this.weatherFormat3.length > 0) {
          let wstr = new FormatWeather(this.location, this.latitude, this.longitude, this.key, this.units, this.language, this.weatherFormat3);
          let weatherStr = await wstr.getWeatherString();
          if (weatherStr.length > 0) {
            this.weatherFormat3 = weatherStr;
            ALL_COMMANDS.push({ command: "Insert Weather String - 3", format: this.weatherFormat3 });
          } else {
            this.weatherFormat3 = "";
            return ALL_COMMANDS.filter((command) => command.command.toLowerCase().includes(query.toLowerCase()));
          }
        }
        if (this.weatherFormat4.length > 0) {
          let wstr = new FormatWeather(this.location, this.latitude, this.longitude, this.key, this.units, this.language, this.weatherFormat4);
          let weatherStr = await wstr.getWeatherString();
          if (weatherStr.length > 0) {
            this.weatherFormat4 = weatherStr;
            ALL_COMMANDS.push({ command: "Insert Weather String - 4", format: this.weatherFormat4 });
          } else {
            this.weatherFormat4 = "";
            return ALL_COMMANDS.filter((command) => command.command.toLowerCase().includes(query.toLowerCase()));
          }
        }
        ALL_COMMANDS.push({ command: "Replace Template Strings", format: "Replace all occurences of %weather1%, %weather2%, %weather3% and %weather4%\nin the current document." });
      } else {
        new import_obsidian.Notice("Please enter edit mode to insert weather strings.");
      }
    }
    return ALL_COMMANDS.filter((command) => command.command.toLowerCase().includes(query.toLowerCase()));
  }
  renderSuggestion(command, el) {
    el.createEl("div", { text: command.command });
    el.createEl("small", { text: command.format });
  }
  async onChooseSuggestion(command, evt) {
    this.command = command.command;
    this.format = command.format;
    this.close();
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!view)
      return;
    const file = app.workspace.getActiveFile();
    let editor = view.getViewData();
    if (editor == null)
      return;
    if (command.command == "Replace Template Strings") {
      if (this.weatherFormat1.length > 0) {
        editor = editor.replace(/%weather1%/gmi, this.weatherFormat1);
        view.setViewData(editor, false);
        file == null ? void 0 : file.vault.modify(file, editor);
      } else {
        return;
      }
      if (this.weatherFormat2.length > 0) {
        editor = editor.replace(/%weather2%/gmi, this.weatherFormat2);
        file == null ? void 0 : file.vault.modify(file, editor);
      } else {
        return;
      }
      if (this.weatherFormat3.length > 0) {
        editor = editor.replace(/%weather3%/gmi, this.weatherFormat3);
        file == null ? void 0 : file.vault.modify(file, editor);
      } else {
        return;
      }
      if (this.weatherFormat4.length > 0) {
        editor = editor.replace(/%weather4%/gmi, this.weatherFormat4);
        file == null ? void 0 : file.vault.modify(file, editor);
      } else {
        return;
      }
    } else {
      view.editor.replaceSelection(this.format);
    }
  }
};
var ALL_CITY_COMMANDS = [];
var CitySearchResultPicker = class extends import_obsidian.SuggestModal {
  constructor(json, settings) {
    super(app);
    this.json = json;
    this.settings = settings;
  }
  async getSuggestions(query) {
    ALL_CITY_COMMANDS = [];
    let cityObjCount = Object.keys(this.json).length;
    let values = Object.values(this.json);
    for (let i = 0; i < cityObjCount; i++) {
      let city = values[i].name;
      let state = values[i].state;
      if (state == void 0) {
        state = "";
      }
      ;
      let country = values[i].country;
      if (country == void 0) {
        country = "";
      }
      ;
      let locationStr = city + " " + state + " " + country;
      let coords = "Latitude: " + values[i].lat + " Longitude: " + values[i].lon;
      ALL_CITY_COMMANDS.push({ city: locationStr, coords, index: i, selection: values[i] });
    }
    let retry = "None of these match? Try again...";
    let redo = "Select to perform another search";
    ALL_CITY_COMMANDS.push({ city: retry, coords: redo, index: 9999, selection: {} });
    return ALL_CITY_COMMANDS.filter((command) => command.city.toLowerCase().includes(query.toLowerCase()));
  }
  renderSuggestion(command, el) {
    el.createEl("div", { text: command.city });
    el.createEl("small", { text: command.coords });
  }
  onChooseSuggestion(command, evt) {
    if (command.index == 9999) {
      return;
    }
    ;
    OpenWeather.prototype.onPick(command.selection, this.settings);
  }
};
var OpenWeatherSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin, settings) {
    super(app2, plugin);
    this.plugin = plugin;
    this.settings = settings;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    let citySearch = this.plugin.settings.location;
    const abstractFiles = app.vault.getAllLoadedFiles();
    const folders = [];
    abstractFiles.forEach((folder) => {
      if (folder instanceof import_obsidian.TFolder && folder.name.length > 0) {
        folders.push(folder);
      }
    });
    new import_obsidian.Setting(containerEl).setName("View on Github").addButton((cb) => {
      cb.setButtonText("GitHub Readme.md");
      cb.setTooltip("Visit OpenWeather Readme.md for detailed plugin information");
      cb.onClick(() => {
        window.open(`https://github.com/willasm/obsidian-open-weather/#openweather-plugin-for-obsidian`, "_blank");
      });
    }).addButton((cb) => {
      cb.setButtonText("Example.md");
      cb.setTooltip("A detailed explanation of how I use the plugin in my daily note");
      cb.onClick(() => {
        window.open(`https://github.com/willasm/obsidian-open-weather/blob/master/EXAMPLE.md`, "_blank");
      });
    }).addButton((cb) => {
      cb.setButtonText("Report Issue");
      cb.setTooltip("Have any questions or comments? Feel free to post them here");
      cb.onClick(() => {
        window.open(`https://github.com/willasm/obsidian-open-weather/issues`, "_blank");
      });
    });
    containerEl.createEl("h2", { text: "OpenWeather API Authentication key (required)" });
    new import_obsidian.Setting(containerEl).setName("OpenWeather API key").setDesc("A free OpenWeather API key is required for the plugin to work. Go to https://openweathermap.org to register and get a key").addText((text) => text.setPlaceholder("Enter OpenWeather API key").setValue(this.plugin.settings.key).onChange(async (value) => {
      this.plugin.settings.key = value;
      await this.plugin.saveSettings();
      await this.plugin.updateWeather();
    }));
    containerEl.createEl("h2", { text: "Location (required)" });
    new import_obsidian.Setting(containerEl).setName("Use Geocoding API to get location (recommended)").setDesc("The Geocoding API returns the requested locations name, state, country, latitude and longitude").addText((text) => text.setPlaceholder("City name to search for").onChange(async (value) => {
      citySearch = value;
    })).addButton((cb) => {
      cb.setButtonText("Get location");
      cb.onClick(async () => {
        let key = this.plugin.settings.key;
        if (key.length == 0) {
          new import_obsidian.Notice("OpenWeather API key is required");
        } else {
          let url;
          url = `https://api.openweathermap.org/geo/1.0/direct?q=${citySearch}&limit=5&appid=${key}`;
          let req = await fetch(url);
          let jsonCitiesObj = await req.json();
          new CitySearchResultPicker(jsonCitiesObj, this.settings).open();
        }
      });
    });
    new import_obsidian.Setting(containerEl).setName("Enter location").setDesc("Name of the city you want to retrieve weather for. Also supports {city name},{country code} or {city name},{state code},{country code} Eg. South Bend,WA,US Please note that searching by states available only for the USA locations").addText((text) => text.setPlaceholder("Enter city Eg. Chicago or South Bend,WA,US").setValue(this.plugin.settings.location).onChange(async (value) => {
      this.plugin.settings.location = value;
      await this.plugin.saveSettings();
      await this.plugin.updateWeather();
    }));
    new import_obsidian.Setting(containerEl).setName("Enter latitude").setDesc("Please note that API requests by city name have been deprecated although they are still available for use. The preferred method is to use latitude and longitude.").addText((text) => text.setPlaceholder("53.5501").setValue(this.plugin.settings.latitude).onChange(async (value) => {
      this.plugin.settings.latitude = value;
      await this.plugin.saveSettings();
      await this.plugin.updateWeather();
    }));
    new import_obsidian.Setting(containerEl).setName("Enter longitude").setDesc("Please note that API requests by city name have been deprecated although they are still available for use. The preferred method is to use latitude and longitude.").addText((text) => text.setPlaceholder("-113.4687").setValue(this.plugin.settings.longitude).onChange(async (value) => {
      this.plugin.settings.longitude = value;
      await this.plugin.saveSettings();
      await this.plugin.updateWeather();
    }));
    containerEl.createEl("h2", { text: "General preferences" });
    new import_obsidian.Setting(containerEl).setName("Units of measurement").setDesc("Units of measurement. Metric, Imperial and Standard units are available").addDropdown((dropDown) => {
      dropDown.addOption("metric", "Metric");
      dropDown.addOption("imperial", "Imperial");
      dropDown.addOption("standard", "Standard");
      dropDown.onChange(async (value) => {
        this.plugin.settings.units = value;
        await this.plugin.saveSettings();
        await this.plugin.updateWeather();
      }).setValue(this.plugin.settings.units);
    });
    new import_obsidian.Setting(containerEl).setName("Language").setDesc("Supported languages available Note: This only affects text returned from the OpenWeather API").addDropdown((dropDown) => {
      dropDown.addOption("af", "Afrikaans");
      dropDown.addOption("al", "Albanian");
      dropDown.addOption("ar", "Arabic");
      dropDown.addOption("az", "Azerbaijani");
      dropDown.addOption("bg", "Bulgarian");
      dropDown.addOption("ca", "Catalan");
      dropDown.addOption("cz", "Czech");
      dropDown.addOption("da", "Danish");
      dropDown.addOption("de", "German");
      dropDown.addOption("el", "Greek");
      dropDown.addOption("en", "English");
      dropDown.addOption("eu", "Basque");
      dropDown.addOption("fa", "Persian (Farsi)");
      dropDown.addOption("fi", "Finnish");
      dropDown.addOption("fr", "French");
      dropDown.addOption("gl", "Galician");
      dropDown.addOption("he", "Hebrew");
      dropDown.addOption("hi", "Hindi");
      dropDown.addOption("hr", "Croatian");
      dropDown.addOption("hu", "Hungarian");
      dropDown.addOption("id", "Indonesian");
      dropDown.addOption("it", "Italian");
      dropDown.addOption("ja", "Japanese");
      dropDown.addOption("kr", "Korean");
      dropDown.addOption("la", "Latvian");
      dropDown.addOption("lt", "Lithuanian");
      dropDown.addOption("mk", "Macedonian");
      dropDown.addOption("no", "Norwegian");
      dropDown.addOption("nl", "Dutch");
      dropDown.addOption("pl", "Polish");
      dropDown.addOption("pt", "Portuguese");
      dropDown.addOption("pt_br", "Portugu\xEAs Brasil");
      dropDown.addOption("ro", "Romanian");
      dropDown.addOption("ru", "Russian");
      dropDown.addOption("sv", "Swedish");
      dropDown.addOption("sk", "Slovak");
      dropDown.addOption("sl", "Slovenian");
      dropDown.addOption("sp", "Spanish");
      dropDown.addOption("sr", "Serbian");
      dropDown.addOption("th", "Thai");
      dropDown.addOption("tr", "Turkish");
      dropDown.addOption("ua", "Ukrainian");
      dropDown.addOption("vi", "Vietnamese");
      dropDown.addOption("zh_cn", "Chinese Simplified");
      dropDown.addOption("zh_tw", "Chinese Traditional");
      dropDown.addOption("zu", "Zulu");
      dropDown.onChange(async (value) => {
        this.plugin.settings.language = value;
        await this.plugin.saveSettings();
        await this.plugin.updateWeather();
      }).setValue(this.plugin.settings.language);
    });
    containerEl.createEl("h2", { text: "Folder to exclude from automatic template strings replacement" });
    new import_obsidian.Setting(containerEl).setName("Exclude folder").setDesc("Folder to exclude from automatic template string replacement").addDropdown((dropDown) => {
      folders.forEach((e) => {
        dropDown.addOption(e.name, e.name);
      });
      dropDown.onChange(async (value) => {
        this.plugin.settings.excludeFolder = value;
        await this.plugin.saveSettings();
      }).setValue(this.plugin.settings.excludeFolder);
    });
    containerEl.createEl("h2", { text: "Weather strings formatting (4 strings are available)" });
    new import_obsidian.Setting(containerEl).setName("Weather string 1").setDesc("Feel free to change this to whatever you like. See the README.md on Github for all available macros.").addTextArea((textArea) => {
      textArea.setPlaceholder("Weather string 1").setValue(this.plugin.settings.weatherFormat1).onChange(async (value) => {
        this.plugin.settings.weatherFormat1 = value;
        await this.plugin.saveSettings();
      });
      textArea.inputEl.setAttr("rows", 10);
      textArea.inputEl.setAttr("cols", 60);
    });
    new import_obsidian.Setting(containerEl).setName("Weather string 2").setDesc("Feel free to change this to whatever you like. See the README.md on Github for all available macros.").addTextArea((textArea) => {
      textArea.setPlaceholder("Weather string 2").setValue(this.plugin.settings.weatherFormat2).onChange(async (value) => {
        this.plugin.settings.weatherFormat2 = value;
        await this.plugin.saveSettings();
      });
      textArea.inputEl.setAttr("rows", 10);
      textArea.inputEl.setAttr("cols", 60);
    });
    new import_obsidian.Setting(containerEl).setName("Weather string 3").setDesc("Feel free to change this to whatever you like. See the README.md on Github for all available macros.").addTextArea((textArea) => {
      textArea.setPlaceholder("Weather string 3").setValue(this.plugin.settings.weatherFormat3).onChange(async (value) => {
        this.plugin.settings.weatherFormat3 = value;
        await this.plugin.saveSettings();
      });
      textArea.inputEl.setAttr("rows", 10);
      textArea.inputEl.setAttr("cols", 60);
    });
    new import_obsidian.Setting(containerEl).setName("Weather string 4").setDesc("Feel free to change this to whatever you like. See the README.md on Github for all available macros.").addTextArea((textArea) => {
      textArea.setPlaceholder("Weather string 4").setValue(this.plugin.settings.weatherFormat4).onChange(async (value) => {
        this.plugin.settings.weatherFormat4 = value;
        await this.plugin.saveSettings();
      });
      textArea.inputEl.setAttr("rows", 10);
      textArea.inputEl.setAttr("cols", 60);
    });
    if (import_obsidian.Platform.isDesktop) {
      containerEl.createEl("h2", { text: "Show weather in statusbar options" });
      new import_obsidian.Setting(containerEl).setName("Show weather in statusbar").setDesc("Enable weather display in statusbar").addToggle((toggle) => toggle.setValue(this.plugin.settings.statusbarActive).onChange(async (value) => {
        this.plugin.settings.statusbarActive = value;
        await this.plugin.saveSettings();
        await this.plugin.updateWeather();
      }));
      new import_obsidian.Setting(containerEl).setName("Weather string format statusbar").setDesc("Weather string format for the statusbar").addTextArea((textArea) => {
        textArea.setPlaceholder("Statusbar Weather Format").setValue(this.plugin.settings.weatherFormatSB).onChange(async (value) => {
          this.plugin.settings.weatherFormatSB = value;
          await this.plugin.saveSettings();
          await this.plugin.updateWeather();
        });
        textArea.inputEl.setAttr("rows", 10);
        textArea.inputEl.setAttr("cols", 60);
      });
    } else {
      this.plugin.settings.statusbarActive = false;
    }
    containerEl.createEl("h2", { text: `Weather update frequency` });
    new import_obsidian.Setting(containerEl).setName("Update frequency").setDesc("Update frequency for weather information displayed on the statusbar and in dynamic DIV's").addDropdown((dropDown) => {
      dropDown.addOption("1", "Every Minute");
      dropDown.addOption("5", "Every 5 Minutes");
      dropDown.addOption("10", "Every 10 Minutes");
      dropDown.addOption("15", "Every 15 Minutes");
      dropDown.addOption("20", "Every 20 Minutes");
      dropDown.addOption("30", "Every 30 Minutes");
      dropDown.addOption("60", "Every Hour");
      dropDown.onChange(async (value) => {
        this.plugin.settings.statusbarUpdateFreq = value;
        await this.plugin.saveSettings();
        await this.plugin.updateWeather();
      }).setValue(this.plugin.settings.statusbarUpdateFreq);
    });
  }
};
